# Problem Description:
The code returns all elements of a given `m x n` matrix in spiral order, starting from the top-left corner and moving clockwise.

# Algorithm:
1. Initialize four boundaries: `top`, `right`, `bottom`, and `left`.
2. Use a while loop to traverse the matrix in spiral order:
   - Traverse from `left` to `right` along the `top` boundary and increment `top`.
   - Traverse from `top` to `bottom` along the `right` boundary and decrement `right`.
   - If `top <= bottom`, traverse from `right` to `left` along the `bottom` boundary and decrement `bottom`.
   - If `left <= right`, traverse from `bottom` to `top` along the `left` boundary and increment `left`.
3. Continue until the boundaries overlap.
4. Return the result as a vector.

# Time Complexity:
- The algorithm runs in O(m * n), where `m` is the number of rows and `n` is the number of columns. This is because each element is visited exactly once.

# Space Complexity:
- The algorithm uses O(1) additional space, excluding the space required for the output vector.

# Edge Cases:
1. A single-row matrix is traversed left to right.
2. A single-column matrix is traversed top to bottom.
3. A square matrix is handled correctly.

# Example:
Input: matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]  
Output: [1, 2, 3, 6, 9, 8, 7, 4, 5]  

Input: matrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]  
Output: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]
