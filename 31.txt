# Problem Description:
The code rearranges numbers into the lexicographically next greater permutation of numbers. If such an arrangement is not possible, it rearranges the numbers into the lowest possible order (sorted in ascending order).

# Algorithm:
1. Find the largest index `index` such that `nums[index] < nums[index + 1]`. If no such index exists, reverse the entire array and return.
2. Find the largest index `j` greater than `index` such that `nums[index] < nums[j]`.
3. Swap `nums[index]` and `nums[j]`.
4. Reverse the subarray starting from `index + 1` to the end of the array.

# Time Complexity:
- The algorithm runs in O(n), where `n` is the size of the array. This is because it involves a single traversal to find `index`, a single traversal to find `j`, and a reversal of part of the array.

# Space Complexity:
- The algorithm uses O(1) additional space as it modifies the array in-place.

# Edge Cases:
1. An array sorted in descending order will be rearranged to ascending order.
2. An array with all identical elements remains unchanged.

# Example:
Input: nums = [1, 2, 3]  
Output: [1, 3, 2]  

Input: nums = [3, 2, 1]  
Output: [1, 2, 3]  

Input: nums = [1, 1, 5]  
Output: [1, 5, 1]
