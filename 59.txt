# Problem Description:
The code generates an `n x n` matrix filled with elements from `1` to `n^2` in spiral order, starting from the top-left corner and moving clockwise.

# Algorithm:
1. Initialize four boundaries: `top`, `right`, `bottom`, and `left`.
2. Use a variable `bag` to keep track of the current number to be placed in the matrix.
3. Use a while loop to fill the matrix in spiral order:
   - Traverse from `left` to `right` along the `top` boundary and increment `top`.
   - Traverse from `top` to `bottom` along the `right` boundary and decrement `right`.
   - If `top <= bottom`, traverse from `right` to `left` along the `bottom` boundary and decrement `bottom`.
   - If `left <= right`, traverse from `bottom` to `top` along the `left` boundary and increment `left`.
4. Continue until the boundaries overlap.
5. Return the filled matrix.

# Time Complexity:
- The algorithm runs in O(n^2), where `n` is the size of the matrix. This is because each element is visited exactly once.

# Space Complexity:
- The algorithm uses O(1) additional space, excluding the space required for the output matrix.

# Edge Cases:
1. For `n = 1`, the matrix contains a single element `[1]`.
2. For larger values of `n`, the matrix is filled correctly in spiral order.

# Example:
Input: n = 3  
Output: [[1, 2, 3], [8, 9, 4], [7, 6, 5]]  

Input: n = 1  
Output: [[1]]
