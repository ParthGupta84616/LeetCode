# Problem Description:
The code finds the length of the shortest subarray in `nums` with a sum greater than or equal to `targetSum`. If no such subarray exists, it returns `-1`.

# Algorithm:
1. Compute the prefix sums of the array to efficiently calculate subarray sums.
2. Use a deque to store indices of prefix sums in a way that maintains monotonicity:
   - Remove indices from the front of the deque if the subarray sum meets or exceeds `targetSum`.
   - Remove indices from the back of the deque if the current prefix sum is smaller or equal to the prefix sum at those indices.
3. Iterate through the prefix sums, updating the shortest subarray length whenever a valid subarray is found.
4. Return the shortest subarray length or `-1` if no valid subarray exists.

# Time Complexity:
- The algorithm runs in O(n), where `n` is the size of the array. This is because each element is added to and removed from the deque at most once.

# Space Complexity:
- The algorithm uses O(n) additional space for the prefix sums and deque.

# Edge Cases:
1. An empty array will return `-1`.
2. If all elements are negative, the result will be `-1` unless `targetSum` is `0`.
3. If the array contains a single element greater than or equal to `targetSum`, the result will be `1`.

# Example:
Input: nums = [2, -1, 2], targetSum = 3  
Output: 3  

Input: nums = [1], targetSum = 1  
Output: 1  

Input: nums = [1, 2], targetSum = 4  
Output: -1
