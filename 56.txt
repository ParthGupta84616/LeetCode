# Problem Description:
The code merges all overlapping intervals in a given list of intervals. Each interval is represented as a pair `[start, end]`, and the result is a list of non-overlapping intervals that cover all the intervals in the input.

# Algorithm:
1. Sort the intervals based on their start times.
2. Initialize `start` and `end` to track the current interval being merged.
3. Iterate through the intervals:
   - If the current interval overlaps with the tracked interval, update `end` to the maximum of the two end times and `start` to the minimum of the two start times.
   - Otherwise, add the tracked interval to the result and update `start` and `end` to the current interval.
4. After the loop, add the last tracked interval to the result if it hasn't been added.
5. Return the merged intervals.

# Time Complexity:
- The algorithm runs in O(n log n), where `n` is the number of intervals. Sorting the intervals takes O(n log n), and merging them takes O(n).

# Space Complexity:
- The algorithm uses O(n) space for the result vector.

# Edge Cases:
1. If the input is empty, the result is an empty vector.
2. If there is only one interval, the result is the same as the input.
3. If no intervals overlap, the result is the same as the input.

# Example:
Input: intervals = [[1, 3], [2, 6], [8, 10], [15, 18]]  
Output: [[1, 6], [8, 10], [15, 18]]  
Explanation: Intervals [1, 3] and [2, 6] overlap, so they are merged into [1, 6].

Input: intervals = [[1, 4], [4, 5]]  
Output: [[1, 5]]  
Explanation: Intervals [1, 4] and [4, 5] overlap, so they are merged into [1, 5].
